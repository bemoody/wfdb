# file: generic-slib.def	G. Moody	31 May 2000
#				Last revised:	27 April 2020
# This section contains settings suitable for compiling a shared version of the
# WFDB library under versions of UNIX that are not otherwise recognized by
# 'configure'.  Not all versions of UNIX support shared libraries, so you may
# not need to use this file.
#
# If you find that changes are needed in order to compile successfully, please
# send a copy of your modifications together with the name of your operating
# system (as reported by the 'uname' command) to wfdb@physionet.org, so that
# support for your operating system can be incorporated in future versions of
# this package.  Thanks!

# Choose a value for WFDBROOT to determine where the WFDB Software Package will
# be installed.  One of the following is usually a reasonable choice.
# Installing in /usr generally requires root permissions, but will be easiest
# for future software development (no special -I or -L options will be needed
# to compile software with the WFDB library, since the *.h files and the
# library will be installed in the standard directories).
WFDBROOT = /usr
# Installing in /usr/local usually requires root permissions.  On a multi-user
# system where it is desirable to keep the OS vendor's software separate from
# other software, this is a good choice.  Another common choice in such cases
# is /opt .
# WFDBROOT = /usr/local
# To install without root permissions, a good choice is to set WFDBROOT to the
# name of your home directory, as in the example below (change as needed).
# WFDBROOT = /home/frodo

# LC and LL are used to determine C compiler and linker options needed to
# enable NETFILES (code that allows applications linked to the WFDB library to
# read input from HTTP and FTP servers, in addition to the standard filesystem
# support available without NETFILES).  The WFDB library can use either
# libcurl (recommended) or libwww to provide NETFILES support.  To use libcurl,
# set LC to `curl-config --cflags` (note the backquotes) and LL to
# `curl-config --libs`.  Otherwise, to use libwww, set LC to
# `libwww-config --cflags` and LL to `libwww-config --libs`.  If neither
# libcurl nor libwww is available, LC and LL should be empty (and NETFILES
# will be disabled).
LC =
LL =

# LIBFLAC_CFLAGS and LIBFLAC_LIBS specify the set of C compiler and
# linker options needed to link with the FLAC library.
LIBFLAC_CFLAGS = `pkg-config --cflags flac`
LIBFLAC_LIBS = `pkg-config --libs flac`

# BINDIR specifies the directory in which the applications will be installed;
# it should be a directory in the PATH of those who will use the applications.
BINDIR = $(WFDBROOT)/bin

# DBDIR specifies the name of a directory in which to install the contents
# of the `data' directory.
DBDIR = $(WFDBROOT)/database

# INCDIR specifies the name of a directory in which to install the WFDB
# library's #include <...> files.
INCDIR = $(WFDBROOT)/include

# LIBDIR specifies the name of a directory in which to install the WFDB
# library.
LIBDIR = $(WFDBROOT)/lib

# RPATHFLAGS is a set of C compiler options that cause the program to
# search for shared libraries in a non-standard location at run-time.
# These options are not needed or useful when using a static library.
RPATHFLAGS = -Wl,-rpath -Wl,$(LIBDIR)

# LDFLAGS is appended to the C compiler command line to specify loading the
# WFDB library.
LDFLAGS = -L$(DESTDIR)$(LIBDIR) -lwfdb $(RPATHFLAGS) $(LL) $(LIBFLAC_LIBS)

# CC is the name of your C compiler.
CC = gcc

# CCDEFS is the set of C compiler options needed to set preprocessor variables
# while compiling the WFDB Software Package.  CCDEFS should always include
# VDEFS.  Add the following options to CCDEFS as appropriate (separating them
# by spaces if you use more than one):
#   -DISPRINTF	  if you do not have `stdlib.h' and your `sprintf' returns an
#		   int (see wfdblib.h)
#   -DNETFILES	  if you have libwww and want to be able to access WFDB files
#		   remotely via http or ftp (as well as local files)
#   -DHAVE_MALLOC_H  if you have `malloc.h' but not `stdlib.h' (see wfdblib.h)
#   -DNOSTRTOK	  if your standard C library does not include function `strtok'
#		   (see wfdbio.c)
#   -DNOTIME	  if you do not have `time.h' (see signal.c)
#   -DNOVALUES_H  if you do not have `values.h' (see psd/log10.c)
#   -DOLDC	  if you have neither `stdarg.h' nor `varargs.h' (see wfdbio.c)
# If your C compiler fails to compile `signal.c', add -DBROKEN_CC to CCDEFS
# and try again (see signal.c).
CCDEFS = $(VDEFS) -DWFDB_LARGETIME

# MFLAGS is the set of architecture-dependent (-m*) compiler options, which
# is usually empty.  See the gcc manual for information about gcc's -m options.
MFLAGS =

# CFLAGS is the set of C compiler options used when compiling the shared
# library.  CFLAGS should always include CCDEFS.
CFLAGS = $(MFLAGS) -fpic -g -O $(CCDEFS) $(LC) $(LIBFLAC_CFLAGS) \
 -I$(DESTDIR)$(INCDIR)

# WFDBLIB_BASENAME is the name, without version numbers, of the alternate
# library.  WFDBLIB_SONAME is the shared object name ("soname") of the
# alternate library; normally, this includes the base name and the major
# version number only. WFDBLIB is the complete name, including the minor
# version number.  Symbolic links from WFDBLIB to WFDBLIB_BASENAME and
# WFDBLIB_SONAME will be created as the final step in building the alternate
# library.
WFDBLIB_BASENAME = libwfdb.so
WFDBLIB_SONAME = $(WFDBLIB_BASENAME).$(MAJOR)
WFDBLIB = $(WFDBLIB_SONAME).$(MINOR)
# For a shared library, the soname is significant for proper run-time binding.
# If you change function interfaces in the library, change its soname by
# incrementing the major version number;  when you do this, set the minor
# version number to zero.  If you change the library without changing the
# function interfaces, increment the minor version number; this allows existing
# binaries to use the new version without recompilation, since the soname is
# unchanged in this case.

# BUILDLIB is the command that creates the shared WFDB library once its
# components have been compiled separately;  the list of *.o files that
# make up the library will be appended to BUILDLIB.  This command varies
# considerably depending on the operating system;  the setting here works
# if gcc and the GNU binutils are installed.
BUILDLIB = $(CC) $(MFLAGS) -shared -Wl,-soname,$(WFDBLIB_SONAME) \
 -o $(WFDBLIB)

# BUILDLIB_LDFLAGS is a list of arguments appended to BUILDLIB following
# the list of *.o files (for most platforms, BUILDLIB_LDFLAGS is empty).
BUILDLIB_LDFLAGS = $(LL) $(LIBFLAC_LIBS)

# PRINT is the name of the program used to produce listings (including any
# options for the desired formatting).
PRINT = lpr

# SETPERMISSIONS is the command needed to make the installed files accessible
# to those who will use them.  The value given below makes them readable by
# everyone, and writeable by the owner only.  (If you perform the installation
# as `root', `root' is the owner of the installed files.)
SETPERMISSIONS = chmod 644

# SETDPERMISSIONS is similarly used to make directories created during the
# installation accessible.
SETDPERMISSIONS = chmod 755

# SETLPERMISSIONS is the command needed to make the WFDB library usable by
# programs linked to it.  Some versions of Unix require shared libraries to
# be marked as executable;  those that do not generally don't care.
SETLPERMISSIONS = chmod 755

# SRANLIB is the name of the program used to index the alternate library.
# Shared libraries are not generally indexed.
SRANLIB = :

# LDCONFIG is the name of the program needed to refresh the system's cached
# index of shared libraries.  Not all operating systems that support shared
# libraries have such an index, so this may be unnecessary.
LDCONFIG = ldconfig
# Under operating systems that do not maintain a cached index of shared
# libraries, uncomment the next line.
# LDCONFIG = :

.POSIX: # enable POSIX compliance mode for some versions of 'make'

# `make' (with no target specified) will be equivalent to `make all'.
make-all:	all

# `make lib-post-install' should be run after installing the WFDB library.
lib-post-install:
	cd $(DESTDIR)$(LIBDIR); ln -sf $(WFDBLIB) $(WFDBLIB_BASENAME)
	cd $(DESTDIR)$(LIBDIR); ln -sf $(WFDBLIB) $(WFDBLIB_SONAME)
	$(SRANLIB) $(DESTDIR)$(LIBDIR)/$(WFDBLIB)
	@$(LDCONFIG) || echo Warning: "$(LDCONFIG)" was unsuccessful

lib-post-uninstall:
	rm -f $(DESTDIR)$(LIBDIR)/$(WFDBLIB_BASENAME)
	rm -f $(DESTDIR)$(LIBDIR)/$(WFDBLIB_SONAME)
	@$(LDCONFIG) || echo Warning: "$(LDCONFIG)" was unsuccessful
#______________________________________________________________________________
